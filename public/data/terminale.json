{
    "sections": [
      {
        "titre": "Préambule",
        "introduction": "L’enseignement de spécialité de **numérique et sciences informatiques** du cycle terminal de la voie générale vise l’appropriation des fondements de l’informatique pour préparer les élèves à une poursuite d’études en les formant à la pratique d’une démarche scientifique et en développant leur appétence pour des activités de recherche.\n\nL’objectif de cet enseignement général est l’appropriation des concepts et des méthodes qui fondent l’informatique, dans ses dimensions scientifiques et techniques. Il s’appuie sur l’universalité de quatre concepts fondamentaux et la variété de leurs interactions : **les données**, **les algorithmes**, **les langages**, **les machines**, ainsi qu'un élément transversal : **les interfaces**.\n\nCet enseignement prolonge les enseignements antérieurs, approfondit les notions vues en première et autorise tous les couplages disciplinaires.\n\nIl permet de développer les compétences suivantes :\n- analyser et modéliser un problème en termes de flux et de traitement d’informations ;\n- décomposer un problème en sous-problèmes ;\n- concevoir des solutions algorithmiques ;\n- traduire un algorithme dans un langage, comprendre et réutiliser des codes sources ;\n- mobiliser les concepts et technologies utiles au traitement de l’information ;\n- développer des capacités d’abstraction et de généralisation.\n\nLes activités pratiques, la recherche, le travail en équipe, l’argumentation et la créativité sont encouragés.\n\nL’enseignement contribue à la certification des compétences numériques et à la préparation de l’épreuve orale terminale."
      },
      {
        "titre": "Démarche de projet",
        "introduction": "Un quart au moins de l’horaire total est réservé aux projets, menés sous la conduite du professeur. Ils permettent une appropriation des concepts et d’acquérir des compétences.\n\nLes projets peuvent porter sur des problématiques variées : simulation d’expériences, IA, données, logiciels, objets connectés, sites Web, jeux, etc.\n\nDes points d’étape sont prévus pour faire un bilan et ajuster les objectifs."
      },
      {
        "titre": "Modalités de mise en œuvre",
        "introduction": "Chaque élève doit disposer d’un accès individuel à un équipement connecté.\n\nUn langage de programmation simple, libre, gratuit et multiplateforme est recommandé : **Python 3 ou supérieur**.\n\nL’enseignement est contextualisé avec des problématiques actuelles. L’approche active et la résolution de problèmes sont privilégiées."
      }
    ],
    "elements": [
      {
        "titre": "Histoire de l'informatique",
        "introduction": "Cette rubrique transversale se décline dans chacune des cinq autres. Elle met en lumière l'évolution des concepts informatiques dans le temps, en lien avec leurs inventeurs, les premiers ordinateurs, le réseau Internet, etc.",
        "items": [
          {
            "contenus": "Événements clés de l’histoire de l’informatique.",
            "capacites": "Situer dans le temps les principaux événements de l’histoire de l’informatique et leurs protagonistes. Identifier l’évolution des rôles relatifs des logiciels et des matériels.",
            "commentaires": "Ces repères viennent compléter ceux introduits en première. Ils sont construits au fur et à mesure de la présentation des concepts."
          }
        ]
      },
      {
        "titre": "Structures de données",
        "introduction": "Les structures de données sont explorées par la mise en œuvre de plusieurs implémentations. L’accent est mis sur la distinction entre interface et implémentation, l’utilisation de classes et de bibliothèques, ainsi que la modélisation de situations variées.",
        "items": [
          {
            "contenus": "Structures de données, interface et implémentation.",
            "capacites": "Spécifier une structure de données par son interface. Distinguer interface et implémentation. Écrire plusieurs implémentations d’une même structure de données.",
            "commentaires": "L’abstraction est introduite à partir d'exemples concrets comme la file."
          },
          {
            "contenus": "Vocabulaire de la programmation objet : classes, attributs, méthodes, objets.",
            "capacites": "Écrire la définition d’une classe. Accéder aux attributs et méthodes.",
            "commentaires": "Le polymorphisme et l’héritage ne sont pas abordés."
          },
          {
            "contenus": "Listes, piles, files, dictionnaires.",
            "capacites": "Distinguer les structures par leurs méthodes. Choisir la structure adaptée. Distinguer une recherche dans une liste et un dictionnaire.",
            "commentaires": "Différenciation FIFO / LIFO mise en avant."
          },
          {
            "contenus": "Arbres : structures hiérarchiques.",
            "capacites": "Identifier une structure arborescente adaptée. Mesurer hauteur, taille.",
            "commentaires": "Liens avec la rubrique algorithmique."
          },
          {
            "contenus": "Graphes : structures relationnelles.",
            "capacites": "Modéliser un réseau sous forme de graphe. Implémenter et transformer les représentations.",
            "commentaires": "Applications : réseaux sociaux, routiers, Internet."
          }
        ]
      },
      {
        "titre": "Bases de données",
        "introduction": "L'organisation, le stockage et l'accès aux données sont essentiels dans l'informatique contemporaine. Le modèle relationnel, les systèmes de gestion et le langage SQL sont abordés pour permettre une manipulation efficace et responsable des données.",
        "items": [
          {
            "contenus": "Modèle relationnel : relation, attribut, domaine, clefs.",
            "capacites": "Identifier les concepts du modèle relationnel.",
            "commentaires": "Contraintes d'intégrité et structure logique."
          },
          {
            "contenus": "Base de données relationnelle.",
            "capacites": "Distinguer structure et contenu. Repérer les anomalies.",
            "commentaires": "Travail sur des données réalistes."
          },
          {
            "contenus": "Système de gestion de base de données.",
            "capacites": "Identifier les services rendus (persistance, concurrence, sécurité).",
            "commentaires": "Compréhension globale sans détails techniques."
          },
          {
            "contenus": "Langage SQL.",
            "capacites": "Construire des requêtes SELECT, JOIN, INSERT, UPDATE, DELETE.",
            "commentaires": "DISTINCT, ORDER BY et fonctions d'agrégation autorisés."
          }
        ]
      },
      {
        "titre": "Architectures matérielles, systèmes d’exploitation et réseaux",
        "introduction": "Cette rubrique aborde les composants matériels modernes (systèmes sur puce), les rôles des systèmes d’exploitation, la transmission de données via Internet, et la sécurité des communications.",
        "items": [
          {
            "contenus": "Systèmes sur puce.",
            "capacites": "Identifier les composants sur schéma et comprendre leur intégration.",
            "commentaires": "Exemple : microprocesseur de smartphone."
          },
          {
            "contenus": "Gestion des processus par le système d'exploitation.",
            "capacites": "Décrire l'ordonnancement, la création et l'interblocage.",
            "commentaires": "Peut être illustré avec des outils standards."
          },
          {
            "contenus": "Protocoles de routage.",
            "capacites": "Identifier la route suivie par un paquet.",
            "commentaires": "Exemples de RIP et OSPF. Lien avec les graphes."
          },
          {
            "contenus": "Sécurisation des communications.",
            "capacites": "Distinguer chiffrement symétrique / asymétrique. Décrire l'échange de clé.",
            "commentaires": "HTTPS, clés publiques / privées. SSL non abordé."
          }
        ]
      },
      {
        "titre": "Langages et programmation",
        "introduction": "Cette rubrique prolonge les apprentissages de première, en insistant sur la sûreté des programmes, la diversité des paradigmes, la récursivité, la modularité, et les méthodes de mise au point.",
        "items": [
          {
            "contenus": "Programme comme donnée. Calculabilité. Décidabilité.",
            "capacites": "Comprendre la notion de programme-donnée. Montrer l'indécidabilité du problème de l'arrêt.",
            "commentaires": "Via des exemples concrets (téléchargement, compilation, OS)."
          },
          {
            "contenus": "Récursivité.",
            "capacites": "Écrire et analyser un programme récursif.",
            "commentaires": "Exemples variés préconisés."
          },
          {
            "contenus": "Modularité.",
            "capacites": "Utiliser, documenter des bibliothèques et modules.",
            "commentaires": "Pratique recommandée pour une meilleure structuration."
          },
          {
            "contenus": "Paradigmes de programmation.",
            "capacites": "Distinguer et choisir entre impératif, fonctionnel, objet.",
            "commentaires": "Plusieurs paradigmes peuvent coexister dans un même projet."
          },
          {
            "contenus": "Mise au point, gestion des bugs.",
            "capacites": "Identifier les causes courantes. Spécification, assertion, test.",
            "commentaires": "Travail poursuivi depuis la classe de première."
          }
        ]
      },
      {
        "titre": "Algorithmique",
        "introduction": "La rubrique approfondit les algorithmes sur les arbres et graphes, introduit la méthode \"diviser pour régner\", la programmation dynamique et l’algorithmique textuelle, en s’appuyant sur les notions de récursivité et d’analyse de complexité.",
        "items": [
          {
            "contenus": "Algorithmes sur arbres binaires / de recherche.",
            "capacites": "Calculer taille et hauteur. Parcourir (infixe, préfixe, suffixe, largeur). Rechercher, insérer une clé.",
            "commentaires": "Recherche logarithmique si arbre équilibré."
          },
          {
            "contenus": "Algorithmes sur graphes.",
            "capacites": "Parcours en profondeur / largeur. Recherche de chemin. Détection de cycle.",
            "commentaires": "Labyrinthe, routage Internet. Classes illustrées."
          },
          {
            "contenus": "Diviser pour régner.",
            "capacites": "Écrire un algorithme basé sur cette stratégie.",
            "commentaires": "Exemple : tri fusion, rotation image."
          },
          {
            "contenus": "Programmation dynamique.",
            "capacites": "Utiliser la méthode pour des problèmes d'optimisation.",
            "commentaires": "Exemples : rendu monnaie, alignement. Coût mémoire discuté."
          },
          {
            "contenus": "Recherche textuelle.",
            "capacites": "Étudier l'algorithme de Boyer-Moore.",
            "commentaires": "Intérêt du prétraitement mis en avant."
          }
        ]
      }
    ]
  }